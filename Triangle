module Triangle where

type Triangle = (Int, Int, Int)

isTriangle :: Triangle -> Bool
isTriangle (x, y, z) = 
  (x + y >= z) && (x + z >= y) && (y + z >= x)

isEquilateral :: Triangle -> Bool
isEquilateral (x,y,z) = (x == y) && (y == z)

isIsosceles :: Triangle -> Bool
isIsosceles (x,y,z) = (x == y) || (x == z) || (y == z)

isDegenerate :: Triangle -> Bool
isDegenerate (x,y,z) = (x + y == z) || (x + z == y) || (y + z == x)

isRight :: Triangle -> Bool
isRight (x,y,z) = (x^2+y^2 == z^2) || (x^2+z^2 == y^2) || (y^2+z^2 == x^2)

triType :: Triangle -> String
triType x
  | not (isTriangle x) = "Not a triangle"
  | isDegenerate x = "Degenerate"
  | isEquilateral x = "Equilateral"
  | isRight x && isIsosceles x = "Isosceles Right"
  | isIsosceles x = "Isosceles"
  | isRight x = "Right"
  | otherwise = "Scalene"
  
main = do 
    print (isTriangle (1,2,3))
    print "***"
